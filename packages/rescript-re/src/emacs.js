// Generated by Melange

import * as Core from "./core.js";
import * as List from "@rescript/std/lib/es6/list.js";
import * as Caml_obj from "@rescript/std/lib/es6/caml_obj.js";
import * as Caml_string from "@rescript/std/lib/es6/caml_string.js";
import * as Caml_exceptions from "@rescript/std/lib/es6/caml_exceptions.js";

var Parse_error = /* @__PURE__ */Caml_exceptions.create("Emacs.Parse_error");

var Not_supported = /* @__PURE__ */Caml_exceptions.create("Emacs.Not_supported");

function parse(s) {
  var i = {
    contents: 0
  };
  var l = s.length;
  var test = function (c) {
    if (i.contents !== l) {
      return Caml_string.get(s, i.contents) === c;
    } else {
      return false;
    }
  };
  var test2 = function (c, c$p) {
    if ((i.contents + 1 | 0) < l && Caml_string.get(s, i.contents) === c) {
      return Caml_string.get(s, i.contents + 1 | 0) === c$p;
    } else {
      return false;
    }
  };
  var accept = function (c) {
    var r = test(c);
    if (r) {
      i.contents = i.contents + 1 | 0;
    }
    return r;
  };
  var accept2 = function (c, c$p) {
    var r = test2(c, c$p);
    if (r) {
      i.contents = i.contents + 2 | 0;
    }
    return r;
  };
  var get = function (param) {
    var r = Caml_string.get(s, i.contents);
    i.contents = i.contents + 1 | 0;
    return r;
  };
  var branch$p = function (_left) {
    while(true) {
      var left = _left;
      if (i.contents === l || test2(/* '\\' */92, /* '|' */124) || test2(/* '\\' */92, /* ')' */41)) {
        return Core.seq(List.rev(left));
      }
      _left = {
        hd: piece(undefined),
        tl: left
      };
      continue ;
    };
  };
  var $$char = function (param) {
    if (i.contents === l) {
      throw {
            RE_EXN_ID: Parse_error,
            Error: new Error()
          };
    }
    return get(undefined);
  };
  var bracket = function (_s) {
    while(true) {
      var s = _s;
      if (Caml_obj.caml_notequal(s, /* [] */0) && accept(/* ']' */93)) {
        return s;
      }
      var c = $$char(undefined);
      if (accept(/* '-' */45)) {
        if (accept(/* ']' */93)) {
          return {
                  hd: Core.$$char(c),
                  tl: {
                    hd: Core.$$char(/* '-' */45),
                    tl: s
                  }
                };
        }
        var c$p = $$char(undefined);
        _s = {
          hd: Core.rg(c, c$p),
          tl: s
        };
        continue ;
      }
      _s = {
        hd: Core.$$char(c),
        tl: s
      };
      continue ;
    };
  };
  var regexp$p = function (_left) {
    while(true) {
      var left = _left;
      if (!accept2(/* '\\' */92, /* '|' */124)) {
        return left;
      }
      _left = Core.alt({
            hd: left,
            tl: {
              hd: branch$p(/* [] */0),
              tl: /* [] */0
            }
          });
      continue ;
    };
  };
  var atom = function (param) {
    if (accept(/* '.' */46)) {
      return Core.notnl;
    }
    if (accept(/* '^' */94)) {
      return Core.bol;
    }
    if (accept(/* '$' */36)) {
      return Core.eol;
    }
    if (accept(/* '[' */91)) {
      if (accept(/* '^' */94)) {
        return Core.compl(bracket(/* [] */0));
      } else {
        return Core.alt(bracket(/* [] */0));
      }
    }
    if (accept(/* '\\' */92)) {
      if (accept(/* '(' */40)) {
        var r = regexp$p(branch$p(/* [] */0));
        if (!accept2(/* '\\' */92, /* ')' */41)) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        return Core.group(r);
      }
      if (accept(/* '`' */96)) {
        return Core.bos;
      }
      if (accept(/* '\'' */39)) {
        return Core.eos;
      }
      if (accept(/* '=' */61)) {
        return Core.start;
      }
      if (accept(/* 'b' */98)) {
        return Core.alt({
                    hd: Core.bow,
                    tl: {
                      hd: Core.eow,
                      tl: /* [] */0
                    }
                  });
      }
      if (accept(/* 'B' */66)) {
        return Core.not_boundary;
      }
      if (accept(/* '<' */60)) {
        return Core.bow;
      }
      if (accept(/* '>' */62)) {
        return Core.eow;
      }
      if (accept(/* 'w' */119)) {
        return Core.alt({
                    hd: Core.alnum,
                    tl: {
                      hd: Core.$$char(/* '_' */95),
                      tl: /* [] */0
                    }
                  });
      }
      if (accept(/* 'W' */87)) {
        return Core.compl({
                    hd: Core.alnum,
                    tl: {
                      hd: Core.$$char(/* '_' */95),
                      tl: /* [] */0
                    }
                  });
      }
      if (i.contents === l) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      var c = get(undefined);
      if (c >= 63) {
        if (c >= 91) {
          if (c >= 95) {
            throw {
                  RE_EXN_ID: Parse_error,
                  Error: new Error()
                };
          }
          return Core.$$char(c);
        }
        if (c >= 64) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        return Core.$$char(c);
      }
      if (c >= 48) {
        if (c >= 58) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        throw {
              RE_EXN_ID: Not_supported,
              Error: new Error()
            };
      }
      if (c >= 36) {
        switch (c) {
          case 36 :
          case 42 :
          case 43 :
          case 46 :
              return Core.$$char(c);
          case 37 :
          case 38 :
          case 39 :
          case 40 :
          case 41 :
          case 44 :
          case 45 :
          case 47 :
              throw {
                    RE_EXN_ID: Parse_error,
                    Error: new Error()
                  };
          
        }
      } else {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
    } else {
      if (i.contents === l) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      var c$1 = get(undefined);
      if (c$1 >= 44) {
        if (c$1 !== 63) {
          return Core.$$char(c$1);
        }
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      if (c$1 >= 42) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      return Core.$$char(c$1);
    }
  };
  var piece = function (param) {
    var r = atom(undefined);
    if (accept(/* '*' */42)) {
      return Core.rep(r);
    } else if (accept(/* '+' */43)) {
      return Core.rep1(r);
    } else if (accept(/* '?' */63)) {
      return Core.opt(r);
    } else {
      return r;
    }
  };
  var res = regexp$p(branch$p(/* [] */0));
  if (i.contents !== l) {
    throw {
          RE_EXN_ID: Parse_error,
          Error: new Error()
        };
  }
  return res;
}

function re(caseOpt, s) {
  var $$case = caseOpt !== undefined ? caseOpt : true;
  var r = parse(s);
  if ($$case) {
    return r;
  } else {
    return Core.no_case(r);
  }
}

function compile_pat(caseOpt, s) {
  var $$case = caseOpt !== undefined ? caseOpt : true;
  return Core.compile(re($$case, s));
}

var compile = Core.compile;

export {
  Parse_error ,
  Not_supported ,
  re ,
  compile ,
  compile_pat ,
  
}
/* Core Not a pure module */
