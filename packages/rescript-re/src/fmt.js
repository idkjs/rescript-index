// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as $$Buffer from "@rescript/std/lib/es6/buffer.js";
import * as Format from "./Format.js";
import * as Printf from "@rescript/std/lib/es6/printf.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";

function list(_$staropt$star, pp, ppf, _param) {
  while(true) {
    var param = _param;
    var $staropt$star = _$staropt$star;
    var pp_sep = $staropt$star !== undefined ? $staropt$star : Format.pp_print_cut;
    if (!param) {
      return ;
    }
    var vs = param.tl;
    var v = param.hd;
    if (!vs) {
      return Curry._2(pp, ppf, v);
    }
    Curry._2(pp, ppf, v);
    Curry._2(pp_sep, ppf, undefined);
    _param = vs;
    _$staropt$star = pp_sep;
    continue ;
  };
}

function sexp(fmt, s, pp, x) {
  return Curry._2(Format.fprintf(fmt, "@[<3>(%s@ %a)@]")(s), pp, x);
}

function pair(pp1, pp2, fmt, param) {
  Curry._2(pp1, fmt, param[0]);
  Format.pp_print_space(fmt, undefined);
  return Curry._2(pp2, fmt, param[1]);
}

function triple(pp1, pp2, pp3, fmt, param) {
  Curry._2(pp1, fmt, param[0]);
  Format.pp_print_space(fmt, undefined);
  Curry._2(pp2, fmt, param[1]);
  Format.pp_print_space(fmt, undefined);
  return Curry._2(pp3, fmt, param[2]);
}

function optint(fmt, i) {
  if (i !== undefined) {
    return Curry._2(Printf.sprintf(fmt), "@ %d", Caml_option.valFromOption(i));
  }
  
}

var quote = Printf.sprintf(/* Format */{
      _0: {
        TAG: /* Char_literal */12,
        _0: /* '\'' */39,
        _1: {
          TAG: /* String */2,
          _0: /* No_padding */0,
          _1: {
            TAG: /* Char_literal */12,
            _0: /* '\'' */39,
            _1: /* End_of_format */0
          }
        }
      },
      _1: "'%s'"
    });

function to_to_string(pp, x) {
  var b = $$Buffer.create(16);
  var fmt = Format.formatter_of_buffer(b);
  Curry._2(pp, fmt, x);
  return $$Buffer.contents(b);
}

var id = Format.id;

var Size = Format.Size;

var String_tag = Format.String_tag;

var pp_enqueue = Format.pp_enqueue;

var pp_clear_queue = Format.pp_clear_queue;

var pp_infinity = Format.pp_infinity;

var pp_output_string = Format.pp_output_string;

var pp_output_newline = Format.pp_output_newline;

var pp_output_spaces = Format.pp_output_spaces;

var pp_output_indent = Format.pp_output_indent;

var format_pp_text = Format.format_pp_text;

var format_string = Format.format_string;

var break_new_line = Format.break_new_line;

var break_line = Format.break_line;

var break_same_line = Format.break_same_line;

var pp_force_break_line = Format.pp_force_break_line;

var pp_skip_token = Format.pp_skip_token;

var format_pp_token = Format.format_pp_token;

var advance_left = Format.advance_left;

var enqueue_advance = Format.enqueue_advance;

var enqueue_string_as = Format.enqueue_string_as;

var enqueue_string = Format.enqueue_string;

var initialize_scan_stack = Format.initialize_scan_stack;

var set_size = Format.set_size;

var scan_push = Format.scan_push;

var pp_open_box_gen = Format.pp_open_box_gen;

var pp_open_sys_box = Format.pp_open_sys_box;

var pp_close_box = Format.pp_close_box;

var pp_open_stag = Format.pp_open_stag;

var pp_close_stag = Format.pp_close_stag;

var pp_open_tag = Format.pp_open_tag;

var pp_close_tag = Format.pp_close_tag;

var pp_set_print_tags = Format.pp_set_print_tags;

var pp_set_mark_tags = Format.pp_set_mark_tags;

var pp_get_print_tags = Format.pp_get_print_tags;

var pp_get_mark_tags = Format.pp_get_mark_tags;

var pp_set_tags = Format.pp_set_tags;

var pp_get_formatter_stag_functions = Format.pp_get_formatter_stag_functions;

var pp_set_formatter_stag_functions = Format.pp_set_formatter_stag_functions;

var pp_rinit = Format.pp_rinit;

var clear_tag_stack = Format.clear_tag_stack;

var pp_flush_queue = Format.pp_flush_queue;

var pp_print_as_size = Format.pp_print_as_size;

var pp_print_as = Format.pp_print_as;

var pp_print_string = Format.pp_print_string;

var pp_print_int = Format.pp_print_int;

var pp_print_float = Format.pp_print_float;

var pp_print_bool = Format.pp_print_bool;

var pp_print_char = Format.pp_print_char;

var pp_open_hbox = Format.pp_open_hbox;

var pp_open_vbox = Format.pp_open_vbox;

var pp_open_hvbox = Format.pp_open_hvbox;

var pp_open_hovbox = Format.pp_open_hovbox;

var pp_open_box = Format.pp_open_box;

var pp_print_newline = Format.pp_print_newline;

var pp_print_flush = Format.pp_print_flush;

var pp_force_newline = Format.pp_force_newline;

var pp_print_if_newline = Format.pp_print_if_newline;

var pp_print_custom_break = Format.pp_print_custom_break;

var pp_print_break = Format.pp_print_break;

var pp_print_space = Format.pp_print_space;

var pp_print_cut = Format.pp_print_cut;

var pp_open_tbox = Format.pp_open_tbox;

var pp_close_tbox = Format.pp_close_tbox;

var pp_print_tbreak = Format.pp_print_tbreak;

var pp_print_tab = Format.pp_print_tab;

var pp_set_tab = Format.pp_set_tab;

var pp_set_max_boxes = Format.pp_set_max_boxes;

var pp_get_max_boxes = Format.pp_get_max_boxes;

var pp_over_max_boxes = Format.pp_over_max_boxes;

var pp_set_ellipsis_text = Format.pp_set_ellipsis_text;

var pp_get_ellipsis_text = Format.pp_get_ellipsis_text;

var pp_limit = Format.pp_limit;

var pp_set_min_space_left = Format.pp_set_min_space_left;

var pp_set_max_indent = Format.pp_set_max_indent;

var pp_get_max_indent = Format.pp_get_max_indent;

var pp_set_margin = Format.pp_set_margin;

var validate_geometry = Format.validate_geometry;

var check_geometry = Format.check_geometry;

var pp_get_margin = Format.pp_get_margin;

var pp_set_full_geometry = Format.pp_set_full_geometry;

var pp_set_geometry = Format.pp_set_geometry;

var pp_safe_set_geometry = Format.pp_safe_set_geometry;

var pp_get_geometry = Format.pp_get_geometry;

var pp_update_geometry = Format.pp_update_geometry;

var pp_set_formatter_out_functions = Format.pp_set_formatter_out_functions;

var pp_get_formatter_out_functions = Format.pp_get_formatter_out_functions;

var pp_set_formatter_output_functions = Format.pp_set_formatter_output_functions;

var pp_get_formatter_output_functions = Format.pp_get_formatter_output_functions;

var display_newline = Format.display_newline;

var blank_line = Format.blank_line;

var display_blanks = Format.display_blanks;

var display_indent = Format.display_indent;

var pp_set_formatter_out_channel = Format.pp_set_formatter_out_channel;

var default_pp_mark_open_tag = Format.default_pp_mark_open_tag;

var default_pp_mark_close_tag = Format.default_pp_mark_close_tag;

var default_pp_print_open_tag = Format.default_pp_print_open_tag;

var default_pp_print_close_tag = Format.default_pp_print_close_tag;

var pp_make_formatter = Format.pp_make_formatter;

var formatter_of_out_functions = Format.formatter_of_out_functions;

var make_formatter = Format.make_formatter;

var formatter_of_out_channel = Format.formatter_of_out_channel;

var formatter_of_buffer = Format.formatter_of_buffer;

var pp_buffer_size = Format.pp_buffer_size;

var pp_make_buffer = Format.pp_make_buffer;

var stdbuf = Format.stdbuf;

var std_formatter = Format.std_formatter;

var err_formatter = Format.err_formatter;

var str_formatter = Format.str_formatter;

var flush_buffer_formatter = Format.flush_buffer_formatter;

var flush_str_formatter = Format.flush_str_formatter;

var make_symbolic_output_buffer = Format.make_symbolic_output_buffer;

var clear_symbolic_output_buffer = Format.clear_symbolic_output_buffer;

var get_symbolic_output_buffer = Format.get_symbolic_output_buffer;

var flush_symbolic_output_buffer = Format.flush_symbolic_output_buffer;

var add_symbolic_output_item = Format.add_symbolic_output_item;

var formatter_of_symbolic_output_buffer = Format.formatter_of_symbolic_output_buffer;

var open_hbox = Format.open_hbox;

var open_vbox = Format.open_vbox;

var open_hvbox = Format.open_hvbox;

var open_hovbox = Format.open_hovbox;

var open_box = Format.open_box;

var close_box = Format.close_box;

var open_tag = Format.open_tag;

var close_tag = Format.close_tag;

var open_stag = Format.open_stag;

var close_stag = Format.close_stag;

var print_as = Format.print_as;

var print_string = Format.print_string;

var print_int = Format.print_int;

var print_float = Format.print_float;

var print_char = Format.print_char;

var print_bool = Format.print_bool;

var print_break = Format.print_break;

var print_cut = Format.print_cut;

var print_space = Format.print_space;

var force_newline = Format.force_newline;

var print_flush = Format.print_flush;

var print_newline = Format.print_newline;

var print_if_newline = Format.print_if_newline;

var open_tbox = Format.open_tbox;

var close_tbox = Format.close_tbox;

var print_tbreak = Format.print_tbreak;

var set_tab = Format.set_tab;

var print_tab = Format.print_tab;

var set_margin = Format.set_margin;

var get_margin = Format.get_margin;

var set_max_indent = Format.set_max_indent;

var get_max_indent = Format.get_max_indent;

var set_geometry = Format.set_geometry;

var safe_set_geometry = Format.safe_set_geometry;

var get_geometry = Format.get_geometry;

var update_geometry = Format.update_geometry;

var set_max_boxes = Format.set_max_boxes;

var get_max_boxes = Format.get_max_boxes;

var over_max_boxes = Format.over_max_boxes;

var set_ellipsis_text = Format.set_ellipsis_text;

var get_ellipsis_text = Format.get_ellipsis_text;

var set_formatter_out_channel = Format.set_formatter_out_channel;

var set_formatter_out_functions = Format.set_formatter_out_functions;

var get_formatter_out_functions = Format.get_formatter_out_functions;

var set_formatter_output_functions = Format.set_formatter_output_functions;

var get_formatter_output_functions = Format.get_formatter_output_functions;

var set_formatter_stag_functions = Format.set_formatter_stag_functions;

var get_formatter_stag_functions = Format.get_formatter_stag_functions;

var set_print_tags = Format.set_print_tags;

var get_print_tags = Format.get_print_tags;

var set_mark_tags = Format.set_mark_tags;

var get_mark_tags = Format.get_mark_tags;

var set_tags = Format.set_tags;

var pp_print_seq_in = Format.pp_print_seq_in;

var pp_print_seq = Format.pp_print_seq;

var pp_print_text = Format.pp_print_text;

var pp_print_option = Format.pp_print_option;

var pp_print_result = Format.pp_print_result;

var compute_tag = Format.compute_tag;

var output_formatting_lit = Format.output_formatting_lit;

var output_acc = Format.output_acc;

var strput_acc = Format.strput_acc;

var kfprintf = Format.kfprintf;

var ikfprintf = Format.ikfprintf;

var ifprintf = Format.ifprintf;

var fprintf = Format.fprintf;

var printf = Format.printf;

var eprintf = Format.eprintf;

var kdprintf = Format.kdprintf;

var ksprintf = Format.ksprintf;

var sprintf = Format.sprintf;

var kasprintf = Format.kasprintf;

var asprintf = Format.asprintf;

var flush_standard_formatters = Format.flush_standard_formatters;

var pp_set_all_formatter_output_functions = Format.pp_set_all_formatter_output_functions;

var pp_get_all_formatter_output_functions = Format.pp_get_all_formatter_output_functions;

var set_all_formatter_output_functions = Format.set_all_formatter_output_functions;

var get_all_formatter_output_functions = Format.get_all_formatter_output_functions;

var kprintf = Format.kprintf;

var pp_set_formatter_tag_functions = Format.pp_set_formatter_tag_functions;

var pp_get_formatter_tag_functions = Format.pp_get_formatter_tag_functions;

var set_formatter_tag_functions = Format.set_formatter_tag_functions;

var get_formatter_tag_functions = Format.get_formatter_tag_functions;

var pp_print_list = list;

var str = Format.pp_print_string;

var $$int = Format.pp_print_int;

export {
  id ,
  Size ,
  String_tag ,
  pp_enqueue ,
  pp_clear_queue ,
  pp_infinity ,
  pp_output_string ,
  pp_output_newline ,
  pp_output_spaces ,
  pp_output_indent ,
  format_pp_text ,
  format_string ,
  break_new_line ,
  break_line ,
  break_same_line ,
  pp_force_break_line ,
  pp_skip_token ,
  format_pp_token ,
  advance_left ,
  enqueue_advance ,
  enqueue_string_as ,
  enqueue_string ,
  initialize_scan_stack ,
  set_size ,
  scan_push ,
  pp_open_box_gen ,
  pp_open_sys_box ,
  pp_close_box ,
  pp_open_stag ,
  pp_close_stag ,
  pp_open_tag ,
  pp_close_tag ,
  pp_set_print_tags ,
  pp_set_mark_tags ,
  pp_get_print_tags ,
  pp_get_mark_tags ,
  pp_set_tags ,
  pp_get_formatter_stag_functions ,
  pp_set_formatter_stag_functions ,
  pp_rinit ,
  clear_tag_stack ,
  pp_flush_queue ,
  pp_print_as_size ,
  pp_print_as ,
  pp_print_string ,
  pp_print_int ,
  pp_print_float ,
  pp_print_bool ,
  pp_print_char ,
  pp_open_hbox ,
  pp_open_vbox ,
  pp_open_hvbox ,
  pp_open_hovbox ,
  pp_open_box ,
  pp_print_newline ,
  pp_print_flush ,
  pp_force_newline ,
  pp_print_if_newline ,
  pp_print_custom_break ,
  pp_print_break ,
  pp_print_space ,
  pp_print_cut ,
  pp_open_tbox ,
  pp_close_tbox ,
  pp_print_tbreak ,
  pp_print_tab ,
  pp_set_tab ,
  pp_set_max_boxes ,
  pp_get_max_boxes ,
  pp_over_max_boxes ,
  pp_set_ellipsis_text ,
  pp_get_ellipsis_text ,
  pp_limit ,
  pp_set_min_space_left ,
  pp_set_max_indent ,
  pp_get_max_indent ,
  pp_set_margin ,
  validate_geometry ,
  check_geometry ,
  pp_get_margin ,
  pp_set_full_geometry ,
  pp_set_geometry ,
  pp_safe_set_geometry ,
  pp_get_geometry ,
  pp_update_geometry ,
  pp_set_formatter_out_functions ,
  pp_get_formatter_out_functions ,
  pp_set_formatter_output_functions ,
  pp_get_formatter_output_functions ,
  display_newline ,
  blank_line ,
  display_blanks ,
  display_indent ,
  pp_set_formatter_out_channel ,
  default_pp_mark_open_tag ,
  default_pp_mark_close_tag ,
  default_pp_print_open_tag ,
  default_pp_print_close_tag ,
  pp_make_formatter ,
  formatter_of_out_functions ,
  make_formatter ,
  formatter_of_out_channel ,
  formatter_of_buffer ,
  pp_buffer_size ,
  pp_make_buffer ,
  stdbuf ,
  std_formatter ,
  err_formatter ,
  str_formatter ,
  flush_buffer_formatter ,
  flush_str_formatter ,
  make_symbolic_output_buffer ,
  clear_symbolic_output_buffer ,
  get_symbolic_output_buffer ,
  flush_symbolic_output_buffer ,
  add_symbolic_output_item ,
  formatter_of_symbolic_output_buffer ,
  open_hbox ,
  open_vbox ,
  open_hvbox ,
  open_hovbox ,
  open_box ,
  close_box ,
  open_tag ,
  close_tag ,
  open_stag ,
  close_stag ,
  print_as ,
  print_string ,
  print_int ,
  print_float ,
  print_char ,
  print_bool ,
  print_break ,
  print_cut ,
  print_space ,
  force_newline ,
  print_flush ,
  print_newline ,
  print_if_newline ,
  open_tbox ,
  close_tbox ,
  print_tbreak ,
  set_tab ,
  print_tab ,
  set_margin ,
  get_margin ,
  set_max_indent ,
  get_max_indent ,
  set_geometry ,
  safe_set_geometry ,
  get_geometry ,
  update_geometry ,
  set_max_boxes ,
  get_max_boxes ,
  over_max_boxes ,
  set_ellipsis_text ,
  get_ellipsis_text ,
  set_formatter_out_channel ,
  set_formatter_out_functions ,
  get_formatter_out_functions ,
  set_formatter_output_functions ,
  get_formatter_output_functions ,
  set_formatter_stag_functions ,
  get_formatter_stag_functions ,
  set_print_tags ,
  get_print_tags ,
  set_mark_tags ,
  get_mark_tags ,
  set_tags ,
  pp_print_seq_in ,
  pp_print_seq ,
  pp_print_text ,
  pp_print_option ,
  pp_print_result ,
  compute_tag ,
  output_formatting_lit ,
  output_acc ,
  strput_acc ,
  kfprintf ,
  ikfprintf ,
  ifprintf ,
  fprintf ,
  printf ,
  eprintf ,
  kdprintf ,
  ksprintf ,
  sprintf ,
  kasprintf ,
  asprintf ,
  flush_standard_formatters ,
  pp_set_all_formatter_output_functions ,
  pp_get_all_formatter_output_functions ,
  set_all_formatter_output_functions ,
  get_all_formatter_output_functions ,
  kprintf ,
  pp_set_formatter_tag_functions ,
  pp_get_formatter_tag_functions ,
  set_formatter_tag_functions ,
  get_formatter_tag_functions ,
  list ,
  pp_print_list ,
  str ,
  sexp ,
  pair ,
  triple ,
  $$int ,
  optint ,
  quote ,
  to_to_string ,
  
}
/* quote Not a pure module */
