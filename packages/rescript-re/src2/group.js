// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fmt from "./fmt.js";
import * as $$Array from "@rescript/std/lib/es6/array.js";
import * as $$String from "@rescript/std/lib/es6/string.js";
import * as Caml_array from "@rescript/std/lib/es6/caml_array.js";

function offset(t, i) {
  if (((i << 1) + 1 | 0) >= t.marks.length) {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  var m1 = Caml_array.get(t.marks, (i << 1));
  if (m1 === -1) {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  var p1 = Caml_array.get(t.gpos, m1) - 1 | 0;
  var p2 = Caml_array.get(t.gpos, Caml_array.get(t.marks, (i << 1) + 1 | 0)) - 1 | 0;
  return [
          p1,
          p2
        ];
}

function get(t, i) {
  var match = offset(t, i);
  var p1 = match[0];
  return $$String.sub(t.s, p1, match[1] - p1 | 0);
}

function start(subs, i) {
  return offset(subs, i)[0];
}

function stop(subs, i) {
  return offset(subs, i)[1];
}

function test(t, i) {
  if ((i << 1) >= t.marks.length) {
    return false;
  }
  var idx = Caml_array.get(t.marks, (i << 1));
  return idx !== -1;
}

function get_opt(t, i) {
  if (test(t, i)) {
    return get(t, i);
  }
  
}

function all_offset(t) {
  var res = Caml_array.make(t.gcount, [
        -1,
        -1
      ]);
  for(var i = 0 ,i_finish = (t.marks.length >> 1); i < i_finish; ++i){
    var m1 = Caml_array.get(t.marks, (i << 1));
    if (m1 !== -1) {
      var p1 = Caml_array.get(t.gpos, m1);
      var p2 = Caml_array.get(t.gpos, Caml_array.get(t.marks, (i << 1) + 1 | 0));
      Caml_array.set(res, i, [
            p1 - 1 | 0,
            p2 - 1 | 0
          ]);
    }
    
  }
  return res;
}

function all(t) {
  var res = Caml_array.make(t.gcount, "");
  for(var i = 0 ,i_finish = (t.marks.length >> 1); i < i_finish; ++i){
    var m1 = Caml_array.get(t.marks, (i << 1));
    if (m1 !== -1) {
      var p1 = Caml_array.get(t.gpos, m1);
      var p2 = Caml_array.get(t.gpos, Caml_array.get(t.marks, (i << 1) + 1 | 0));
      Caml_array.set(res, i, $$String.sub(t.s, p1 - 1 | 0, p2 - p1 | 0));
    }
    
  }
  return res;
}

function pp(fmt, t) {
  var offsets = all_offset(t);
  var strs = all(t);
  var matches = $$Array.to_list($$Array.init(strs.length, (function (i) {
              return [
                      Caml_array.get(strs, i),
                      Caml_array.get(offsets, i)
                    ];
            })));
  var pp_match = function (fmt, param) {
    var match = param[1];
    console.log(fmt, "@[(%s (%d %d))@]", param[0], match[0], match[1]);
    
  };
  return Fmt.sexp(fmt, "Group", pp_match, matches);
}

function nb_groups(t) {
  return t.gcount;
}

export {
  get ,
  get_opt ,
  offset ,
  start ,
  stop ,
  all ,
  all_offset ,
  test ,
  nb_groups ,
  pp ,
  
}
/* No side effect */
