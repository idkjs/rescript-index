// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "./core.js";
import * as List from "@rescript/std/lib/es6/list.js";
import * as Caml_string from "@rescript/std/lib/es6/caml_string.js";
import * as Caml_exceptions from "@rescript/std/lib/es6/caml_exceptions.js";

var Parse_error = /* @__PURE__ */Caml_exceptions.create("Posix.Parse_error");

var Not_supported = /* @__PURE__ */Caml_exceptions.create("Posix.Not_supported");

function parse(newline, s) {
  var i = {
    contents: 0
  };
  var l = s.length;
  var test = function (c) {
    if (i.contents !== l) {
      return Caml_string.get(s, i.contents) === c;
    } else {
      return false;
    }
  };
  var accept = function (c) {
    var r = test(c);
    if (r) {
      i.contents = i.contents + 1 | 0;
    }
    return r;
  };
  var get = function (param) {
    var r = Caml_string.get(s, i.contents);
    i.contents = i.contents + 1 | 0;
    return r;
  };
  var atom = function (param) {
    if (accept(/* '.' */46)) {
      if (newline) {
        return Core.notnl;
      } else {
        return Core.any;
      }
    }
    if (accept(/* '(' */40)) {
      var r = regexp$p(branch$p(/* [] */0));
      if (!accept(/* ')' */41)) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      return Core.group(r);
    }
    if (accept(/* '^' */94)) {
      if (newline) {
        return Core.bol;
      } else {
        return Core.bos;
      }
    }
    if (accept(/* '$' */36)) {
      if (newline) {
        return Core.eol;
      } else {
        return Core.eos;
      }
    }
    if (accept(/* '[' */91)) {
      if (accept(/* '^' */94)) {
        return Core.diff(Core.compl(bracket(/* [] */0)), Core.$$char(/* '\n' */10));
      } else {
        return Core.alt(bracket(/* [] */0));
      }
    }
    if (accept(/* '\\' */92)) {
      if (i.contents === l) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      var c = get(undefined);
      if (c >= 91) {
        if (c > 122 || c < 93) {
          if (c >= 125) {
            throw {
                  RE_EXN_ID: Parse_error,
                  Error: new Error()
                };
          }
          return Core.$$char(c);
        }
        if (c !== 94) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        return Core.$$char(c);
      }
      if (c >= 47) {
        if (c !== 63) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        return Core.$$char(c);
      }
      if (c >= 36) {
        switch (c) {
          case 37 :
          case 38 :
          case 39 :
          case 44 :
          case 45 :
              throw {
                    RE_EXN_ID: Parse_error,
                    Error: new Error()
                  };
          case 36 :
          case 40 :
          case 41 :
          case 42 :
          case 43 :
          case 46 :
              return Core.$$char(c);
          
        }
      } else {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
    } else {
      if (i.contents === l) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      var c$1 = get(undefined);
      if (c$1 >= 64) {
        if (c$1 !== 92) {
          if (c$1 !== 123) {
            return Core.$$char(c$1);
          }
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      if (c$1 >= 44) {
        if (c$1 >= 63) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        return Core.$$char(c$1);
      }
      if (c$1 >= 42) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      return Core.$$char(c$1);
    }
  };
  var integer = function (param) {
    if (i.contents === l) {
      return ;
    }
    var d = get(undefined);
    if (d > 57 || d < 48) {
      i.contents = i.contents - 1 | 0;
      return ;
    } else {
      var _i = d - /* '0' */48 | 0;
      while(true) {
        var i$1 = _i;
        if (i.contents === l) {
          return i$1;
        }
        var d$1 = get(undefined);
        if (d$1 > 57 || d$1 < 48) {
          i.contents = i.contents - 1 | 0;
          return i$1;
        }
        var i$p = Math.imul(10, i$1) + (d$1 - /* '0' */48 | 0) | 0;
        if (i$p < i$1) {
          throw {
                RE_EXN_ID: Parse_error,
                Error: new Error()
              };
        }
        _i = i$p;
        continue ;
      };
    }
  };
  var branch$p = function (_left) {
    while(true) {
      var left = _left;
      if (i.contents === l || test(/* '|' */124) || test(/* ')' */41)) {
        return Core.seq(List.rev(left));
      }
      _left = {
        hd: piece(undefined),
        tl: left
      };
      continue ;
    };
  };
  var regexp$p = function (_left) {
    while(true) {
      var left = _left;
      if (!accept(/* '|' */124)) {
        return left;
      }
      _left = Core.alt({
            hd: left,
            tl: {
              hd: branch$p(/* [] */0),
              tl: /* [] */0
            }
          });
      continue ;
    };
  };
  var piece = function (param) {
    var r = atom(undefined);
    if (accept(/* '*' */42)) {
      return Core.rep(Core.nest(r));
    }
    if (accept(/* '+' */43)) {
      return Core.rep1(Core.nest(r));
    }
    if (accept(/* '?' */63)) {
      return Core.opt(r);
    }
    if (!accept(/* '{' */123)) {
      return r;
    }
    var i$1 = integer(undefined);
    if (i$1 !== undefined) {
      var j = accept(/* ',' */44) ? integer(undefined) : i$1;
      if (!accept(/* '}' */125)) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      if (j !== undefined && j < i$1) {
        throw {
              RE_EXN_ID: Parse_error,
              Error: new Error()
            };
      }
      return Core.repn(Core.nest(r), i$1, j);
    }
    i.contents = i.contents - 1 | 0;
    return r;
  };
  var $$char = function (param) {
    if (i.contents === l) {
      throw {
            RE_EXN_ID: Parse_error,
            Error: new Error()
          };
    }
    var c = get(undefined);
    if (c !== /* '[' */91) {
      return c;
    }
    if (accept(/* '=' */61)) {
      throw {
            RE_EXN_ID: Not_supported,
            Error: new Error()
          };
    }
    if (accept(/* ':' */58)) {
      throw {
            RE_EXN_ID: Not_supported,
            Error: new Error()
          };
    }
    if (!accept(/* '.' */46)) {
      return c;
    }
    if (i.contents === l) {
      throw {
            RE_EXN_ID: Parse_error,
            Error: new Error()
          };
    }
    var c$1 = get(undefined);
    if (!accept(/* '.' */46)) {
      throw {
            RE_EXN_ID: Not_supported,
            Error: new Error()
          };
    }
    if (!accept(/* ']' */93)) {
      throw {
            RE_EXN_ID: Parse_error,
            Error: new Error()
          };
    }
    return c$1;
  };
  var bracket = function (_s) {
    while(true) {
      var s = _s;
      if (s !== /* [] */0 && accept(/* ']' */93)) {
        return s;
      }
      var c = $$char(undefined);
      if (accept(/* '-' */45)) {
        if (accept(/* ']' */93)) {
          return {
                  hd: Core.$$char(c),
                  tl: {
                    hd: Core.$$char(/* '-' */45),
                    tl: s
                  }
                };
        }
        var c$p = $$char(undefined);
        _s = {
          hd: Core.rg(c, c$p),
          tl: s
        };
        continue ;
      }
      _s = {
        hd: Core.$$char(c),
        tl: s
      };
      continue ;
    };
  };
  var res = regexp$p(branch$p(/* [] */0));
  if (i.contents !== l) {
    throw {
          RE_EXN_ID: Parse_error,
          Error: new Error()
        };
  }
  return res;
}

function re(optsOpt, s) {
  var opts = optsOpt !== undefined ? optsOpt : /* [] */0;
  var r = parse(List.memq("Newline", opts), s);
  var r$1 = List.memq("ICase", opts) ? Core.no_case(r) : r;
  if (List.memq("NoSub", opts)) {
    return Core.no_group(r$1);
  } else {
    return r$1;
  }
}

function compile(re) {
  return Core.compile(Core.longest(re));
}

function compile_pat(optsOpt, s) {
  var opts = optsOpt !== undefined ? optsOpt : /* [] */0;
  var re$1 = re(opts, s);
  return Core.compile(Core.longest(re$1));
}

export {
  Parse_error ,
  Not_supported ,
  re ,
  compile ,
  compile_pat ,
  
}
/* Core Not a pure module */
