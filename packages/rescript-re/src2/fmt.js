// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as $$Buffer from "@rescript/std/lib/es6/buffer.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";

function list(_$staropt$star, pp, ppf, _param) {
  while(true) {
    var param = _param;
    var $staropt$star = _$staropt$star;
    var pp_sep = $staropt$star !== undefined ? $staropt$star : (function (prim) {
          console.log(prim);
          
        });
    if (!param) {
      return ;
    }
    var vs = param.tl;
    var v = param.hd;
    if (!vs) {
      return Curry._2(pp, ppf, v);
    }
    Curry._2(pp, ppf, v);
    Curry._1(pp_sep, ppf);
    _param = vs;
    _$staropt$star = pp_sep;
    continue ;
  };
}

function sexp(fmt, s, pp, x) {
  console.log(fmt, "@[<3>(%s@ %a)@]", s, pp, x);
  
}

function pair(v1, v2) {
  console.log(v1);
  console.log(v2);
  
}

function triple(prim) {
  console.log(prim);
  
}

function optint(fmt, i) {
  if (i !== undefined) {
    console.log(fmt, "@ %d", Caml_option.valFromOption(i));
    return ;
  }
  
}

function quote(fmt, s) {
  console.log(fmt, "\"%s\"", s);
  
}

function pp_olist(pp_elem, fmt) {
  var partial_arg = "@[<3>[@ %a@ ]@];@ " + pp_elem;
  return function (param, param$1, param$2) {
    console.log(partial_arg, param, param$1, param$2);
    
  };
}

function to_to_string(pp, x) {
  var b = $$Buffer.create(16);
  console.log(b);
  Curry._2(pp, undefined, x);
  return $$Buffer.contents(b);
}

export {
  list ,
  sexp ,
  pair ,
  triple ,
  optint ,
  quote ,
  pp_olist ,
  to_to_string ,
  
}
/* No side effect */
